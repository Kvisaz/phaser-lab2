{"version":3,"file":"bundle.75270de99e491167b9b2.js","mappings":"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","sources":["webpack://phaser-lab2/./storybook/StoryScene.ts","webpack://phaser-lab2/./storybook/interfaces.ts","webpack://phaser-lab2/./src/components/Test/TestButton.ts","webpack://phaser-lab2/./src/components/Test/TestButton.story.ts","webpack://phaser-lab2/./src/common/loadSpritesheet.ts","webpack://phaser-lab2/./src/components/Minesweeper/AssetImages.ts","webpack://phaser-lab2/./src/components/Minesweeper/Minesweeper.ts","webpack://phaser-lab2/./src/components/Minesweeper/Minesweeper.story.ts","webpack://phaser-lab2/./storybook/stories.ts","webpack://phaser-lab2/./src/scenes/MainScene.ts","webpack://phaser-lab2/./src/config.ts","webpack://phaser-lab2/./storybook/index.ts"],"sourcesContent":["export class StoryScene extends Phaser.Scene {\r\n  preload() {\r\n    /** включает в себя загрузку текстуры поэтому ставим тут **/\r\n    // addTestMapBg(this).catch(console.warn);\r\n  }\r\n  create() {\r\n    console.log(\"Story Scene created...\");\r\n  }\r\n}\r\n","export type GameObject =\r\n  | Phaser.GameObjects.Container\r\n  | Phaser.GameObjects.Image\r\n  | Phaser.GameObjects.Text\r\n  | Phaser.GameObjects.RenderTexture\r\n  | Phaser.GameObjects.Shape\r\n  | Phaser.GameObjects.TileSprite;\r\n\r\nexport interface IStory {\r\n  title: string;\r\n  /**\r\n   *  run\r\n   *  - может создавать что угодно на сцене\r\n   *  - возвращаемая функция должна очищать созданный объект\r\n   *  - добавление к сцене лежит на его ответственности\r\n   */\r\n  run: (scene: Phaser.Scene) => Promise<() => void>;\r\n}\r\n\r\nexport interface IStoryListItem extends Partial<IStory>{\r\n  title: string;\r\n  template?: 'titleDelimiter',\r\n  run?: (scene: Phaser.Scene) => Promise<() => void>;\r\n}\r\n\r\nexport const storyTitle = (title:string):IStoryListItem=>({ title, template: 'titleDelimiter'})\r\n","interface IProps {\r\n  scene: Phaser.Scene;\r\n  text: string;\r\n}\r\n\r\nexport class TestButton extends Phaser.GameObjects.Container {\r\n  constructor({ scene, text }: IProps) {\r\n    super(scene);\r\n    const textObject = scene.add.text(0, 0, text, { fontSize: \"32px\", color: \"#dedede\" });\r\n\r\n    this.add([textObject]);\r\n    scene.add.existing(this as Phaser.GameObjects.Container);\r\n  }\r\n}\r\n","import { IStory } from \"../../../storybook/interfaces\";\r\nimport { TestButton } from \"./TestButton\";\r\n\r\nexport const testButtonStory: IStory = {\r\n  title: \"TestButton\",\r\n  run: async (scene) => {\r\n    const container = new TestButton({ scene, text: \"Hello\" });\r\n\r\n    return ()=>{\r\n      container.destroy();\r\n    }\r\n  }\r\n};\r\n\r\nexport const testButtonStory2: IStory = {\r\n  title: \"TestButton 2\",\r\n  run: async (scene) => {\r\n    const container = new TestButton({ scene, text: \"Hello2\" });\r\n\r\n    return ()=>{\r\n      container.destroy();\r\n    }\r\n  }\r\n};\r\n","interface IProps {\r\n  scene: Phaser.Scene;\r\n  textureName: string;\r\n  frameWidth: number;\r\n  frameHeight: number;\r\n}\r\n\r\nexport const loadSpriteSheet = async ({ scene, textureName, frameHeight, frameWidth }: IProps) => {\r\n  return new Promise<void>((resolve) => {\r\n    scene.load.spritesheet(textureName, \"./assets/atlases/minesweeper01.png\", {\r\n      frameWidth,\r\n      frameHeight\r\n    });\r\n    scene.load.once(Phaser.Loader.Events.COMPLETE, () => {\r\n      resolve();\r\n    });\r\n    scene.load.start();\r\n  });\r\n};","import { loadSpriteSheet } from \"../../common\";\r\n\r\nexport const textureName = \"minesweeper\";\r\n\r\nexport const loadMineSweeperAssets = async (scene: Phaser.Scene) => loadSpriteSheet({\r\n  scene, textureName, frameWidth: 128, frameHeight: 128\r\n})\r\n\r\n// AssetImages.ts\r\n\r\nexport const AssetImages = {\r\n  cell: {\r\n    textureName,\r\n    frameIndex: 0, // Индекс кадра для \"cell\"\r\n  },\r\n  revealedCell: {\r\n    textureName,\r\n    frameIndex: 1, // Индекс кадра для \"revealedCell\"\r\n  },\r\n  flag: {\r\n    textureName,\r\n    frameIndex: 2, // Индекс кадра для \"flag\"\r\n  },\r\n  mine: {\r\n    textureName,\r\n    frameIndex: 3, // Индекс кадра для \"mine\"\r\n  },\r\n};\r\n\r\n","import {AssetImages} from \"./AssetImages\";\r\n\r\ninterface IProps {\r\n    scene: Phaser.Scene;\r\n    cellSize: number;\r\n    columns: number;\r\n    rows: number;\r\n    minesAmount: number;\r\n    onCellReveal?: (cell: Cell) => void; // Коллбэк при открытии ячейки\r\n    onGameOver?: (isWin: boolean) => void; // Коллбэк при завершении игры\r\n}\r\n\r\n/** почти хорош, но  to do\r\n * - как делать флаги?\r\n * - первый клик должен быть всегда чистым, меняй мину если она попадется\r\n **/\r\nexport class Minesweeper extends Phaser.GameObjects.Container {\r\n    private grid: Cell[][];\r\n    private cellSize: number;\r\n    private columns: number;\r\n    private rows: number;\r\n    private minesAmount: number;\r\n    private flagsLeft: number;\r\n    private onCellReveal?: (cell: Cell) => void;\r\n    private onGameOver?: (isWin: boolean) => void;\r\n    private isGameOver: boolean = false;\r\n\r\n    constructor({\r\n                    scene,\r\n                    cellSize,\r\n                    columns,\r\n                    rows,\r\n                    minesAmount,\r\n                    onCellReveal,\r\n                    onGameOver,\r\n                }: IProps) {\r\n        super(scene);\r\n\r\n        this.cellSize = cellSize;\r\n        this.columns = columns;\r\n        this.rows = rows;\r\n        this.minesAmount = minesAmount;\r\n        this.flagsLeft = minesAmount;\r\n        this.onCellReveal = onCellReveal;\r\n        this.onGameOver = onGameOver;\r\n\r\n        this.grid = [];\r\n        this.createGrid();\r\n        this.placeMines();\r\n        this.calculateAdjacentMines();\r\n\r\n        scene.add.existing(this);\r\n    }\r\n\r\n    private createGrid() {\r\n        for (let row = 0; row < this.rows; row++) {\r\n            this.grid[row] = [];\r\n            for (let col = 0; col < this.columns; col++) {\r\n                const cell = new Cell({\r\n                    scene: this.scene,\r\n                    x: col * this.cellSize,\r\n                    y: row * this.cellSize,\r\n                    size: this.cellSize,\r\n                    row,\r\n                    col,\r\n                    onClick: this.handleCellClick.bind(this),\r\n                    onRightClick: this.handleCellRightClick.bind(this),\r\n                });\r\n                this.grid[row][col] = cell;\r\n                this.add(cell);\r\n            }\r\n        }\r\n    }\r\n\r\n    private placeMines() {\r\n        let minesPlaced = 0;\r\n        while (minesPlaced < this.minesAmount) {\r\n            const row = Phaser.Math.Between(0, this.rows - 1);\r\n            const col = Phaser.Math.Between(0, this.columns - 1);\r\n            const cell = this.grid[row][col];\r\n            if (!cell.isMine) {\r\n                cell.isMine = true;\r\n                minesPlaced++;\r\n            }\r\n        }\r\n    }\r\n\r\n    private calculateAdjacentMines() {\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for (let col = 0; col < this.columns; col++) {\r\n                const cell = this.grid[row][col];\r\n                if (!cell.isMine) {\r\n                    let minesCount = 0;\r\n                    this.getNeighbors(cell).forEach((neighbor) => {\r\n                        if (neighbor.isMine) minesCount++;\r\n                    });\r\n                    cell.adjacentMines = minesCount;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getNeighbors(cell: Cell): Cell[] {\r\n        const neighbors: Cell[] = [];\r\n        for (let y = -1; y <= 1; y++) {\r\n            for (let x = -1; x <= 1; x++) {\r\n                const row = cell.row + y;\r\n                const col = cell.col + x;\r\n                if (\r\n                    row >= 0 &&\r\n                    row < this.rows &&\r\n                    col >= 0 &&\r\n                    col < this.columns &&\r\n                    !(x === 0 && y === 0)\r\n                ) {\r\n                    neighbors.push(this.grid[row][col]);\r\n                }\r\n            }\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    private handleCellClick(cell: Cell) {\r\n        if (this.isGameOver || cell.isRevealed || cell.isFlagged) return;\r\n\r\n        cell.reveal();\r\n        if (cell.isMine) {\r\n            this.gameOver(false);\r\n        } else if (cell.adjacentMines === 0) {\r\n            this.revealAdjacentCells(cell);\r\n        }\r\n\r\n        if (this.onCellReveal) {\r\n            this.onCellReveal(cell);\r\n        }\r\n\r\n        if (this.checkWinCondition()) {\r\n            this.gameOver(true);\r\n        }\r\n    }\r\n\r\n    private handleCellRightClick(cell: Cell) {\r\n        if (this.isGameOver || cell.isRevealed) return;\r\n\r\n        cell.toggleFlag();\r\n        this.flagsLeft += cell.isFlagged ? -1 : 1;\r\n\r\n        if (this.onCellReveal) {\r\n            this.onCellReveal(cell);\r\n        }\r\n    }\r\n\r\n    private revealAdjacentCells(cell: Cell) {\r\n        this.getNeighbors(cell).forEach((neighbor) => {\r\n            if (!neighbor.isRevealed && !neighbor.isFlagged) {\r\n                neighbor.reveal();\r\n                if (neighbor.adjacentMines === 0) {\r\n                    this.revealAdjacentCells(neighbor);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private checkWinCondition(): boolean {\r\n        for (let row = 0; row < this.rows; row++) {\r\n            for (let col = 0; col < this.columns; col++) {\r\n                const cell = this.grid[row][col];\r\n                if (!cell.isMine && !cell.isRevealed) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private gameOver(isWin: boolean) {\r\n        this.isGameOver = true;\r\n        if (!isWin) {\r\n            // Открыть все мины\r\n            this.grid.forEach((row) => {\r\n                row.forEach((cell) => {\r\n                    if (cell.isMine) {\r\n                        cell.reveal();\r\n                    }\r\n                });\r\n            });\r\n        }\r\n\r\n        if (this.onGameOver) {\r\n            this.onGameOver(isWin);\r\n        }\r\n    }\r\n}\r\n\r\ninterface CellProps {\r\n    scene: Phaser.Scene;\r\n    x: number;\r\n    y: number;\r\n    size: number;\r\n    row: number;\r\n    col: number;\r\n    onClick: (cell: Cell) => void;\r\n    onRightClick: (cell: Cell) => void;\r\n}\r\n\r\nexport class Cell extends Phaser.GameObjects.Container {\r\n    public isMine: boolean = false;\r\n    public isRevealed: boolean = false;\r\n    public isFlagged: boolean = false;\r\n    public adjacentMines: number = 0;\r\n    public row: number;\r\n    public col: number;\r\n\r\n    private bg: Phaser.GameObjects.Image;\r\n    private text: Phaser.GameObjects.Text;\r\n    private onClick: (cell: Cell) => void;\r\n    private onRightClick: (cell: Cell) => void;\r\n\r\n    constructor({\r\n                    scene,\r\n                    x,\r\n                    y,\r\n                    size,\r\n                    row,\r\n                    col,\r\n                    onClick,\r\n                    onRightClick,\r\n                }: CellProps) {\r\n        super(scene, x, y);\r\n\r\n        this.row = row;\r\n        this.col = col;\r\n        this.onClick = onClick;\r\n        this.onRightClick = onRightClick;\r\n\r\n        // Фон ячейки\r\n        this.bg = scene.add\r\n            .image(0, 0,  AssetImages.cell.textureName, AssetImages.cell.frameIndex)\r\n            .setDisplaySize(size, size)\r\n            .setInteractive()\r\n            .on('pointerdown', (pointer: Phaser.Input.Pointer) => {\r\n                if (pointer.rightButtonDown()) {\r\n                    this.onRightClick(this);\r\n                } else {\r\n                    this.onClick(this);\r\n                }\r\n            });\r\n\r\n        // Текст для отображения числа соседних мин\r\n        this.text = scene.add.text(0, 0, '', {\r\n            fontSize: `${size * 0.6}px`,\r\n            color: '#000',\r\n        });\r\n        this.text.setOrigin(0.5);\r\n\r\n        this.add([this.bg, this.text]);\r\n        this.setSize(size, size);\r\n        this.setPosition(x + size / 2, y + size / 2);\r\n    }\r\n\r\n    reveal() {\r\n        if (this.isRevealed) return;\r\n\r\n        this.isRevealed = true;\r\n        this.bg.setTexture(AssetImages.revealedCell.textureName, AssetImages.revealedCell.frameIndex);\r\n\r\n        if (this.isMine) {\r\n            this.bg.setTexture(AssetImages.mine.textureName, AssetImages.mine.frameIndex);\r\n        } else if (this.adjacentMines > 0) {\r\n            this.text.setText(this.adjacentMines.toString());\r\n        }\r\n    }\r\n\r\n    toggleFlag() {\r\n        this.isFlagged = !this.isFlagged;\r\n        this.bg.setTexture(\r\n          this.isFlagged\r\n            ? AssetImages.flag.textureName\r\n            : AssetImages.cell.textureName,\r\n          this.isFlagged\r\n            ? AssetImages.flag.frameIndex\r\n            : AssetImages.cell.frameIndex\r\n        );\r\n    }\r\n}\r\n\r\n","import { IStory } from \"../../../storybook/interfaces\";\r\nimport { Minesweeper } from \"./Minesweeper\";\r\nimport { loadMineSweeperAssets } from \"./AssetImages\";\r\n\r\nexport const minesweeperStory: IStory = {\r\n  title: \"Minesweeper\",\r\n  run: async (scene) => {\r\n\r\n    await loadMineSweeperAssets(scene);\r\n\r\n    const container = new Minesweeper({\r\n      scene,\r\n      cellSize: 32,\r\n      columns: 10,\r\n      rows: 10,\r\n      minesAmount: 15,\r\n      onCellReveal: cell => {\r\n        console.log(\"onCellReveal\", cell);\r\n      },\r\n      onGameOver: isWin => {\r\n        console.log(\"onGameOver\", isWin);\r\n      }\r\n    });\r\n    scene.add.existing(container);\r\n\r\n    return () => {\r\n      container.destroy();\r\n    };\r\n  }\r\n};","import { IStoryListItem, storyTitle } from \"./interfaces\";\r\nimport { testButtonStory, testButtonStory2 } from \"../src/components/Test/TestButton.story\";\r\nimport { minesweeperStory } from \"../src/components/Minesweeper/Minesweeper.story\";\r\n\r\nexport const stories: IStoryListItem[] = Array.from(\r\n  new Set<IStoryListItem>([\r\n    storyTitle(\"Phaser Games\"),\r\n    minesweeperStory,\r\n    storyTitle(\"Simple Games\"),\r\n    testButtonStory,\r\n    testButtonStory2\r\n  ])\r\n);\r\n","export class MainScene extends Phaser.Scene {\r\n  constructor() {\r\n    super(MainScene.name);\r\n  }\r\n\r\n  preload() {\r\n    this.load.image(\"sky\", \"./assets/images/space3.png\");\r\n    this.load.image(\"logo\", \"./assets/images/phaser3-logo.png\");\r\n    this.load.image(\"red\", \"./assets/images/red.png\");\r\n  }\r\n\r\n  create() {\r\n    this.add.image(400, 300, \"sky\");\r\n\r\n    const particles = this.add.particles(0, 0, \"red\", {\r\n      speed: 100,\r\n      scale: { start: 1, end: 0 },\r\n      blendMode: \"ADD\"\r\n    });\r\n\r\n    const logo = this.physics.add.image(400, 100, \"logo\");\r\n\r\n    logo.setVelocity(100, 200);\r\n    logo.setBounce(1, 1);\r\n    logo.setCollideWorldBounds(true);\r\n\r\n    particles.startFollow(logo);\r\n\r\n    console.log('Game started');\r\n  }\r\n}\r\n","import { MainScene } from \"./scenes/MainScene\";\r\n\r\nconst scaleConfig: Phaser.Types.Core.ScaleConfig = {\r\n  mode: Phaser.Scale.FIT,\r\n  autoCenter: Phaser.Scale.CENTER_BOTH,\r\n  parent: \"game\",\r\n  width: 960,\r\n  height: 640\r\n};\r\n\r\nexport interface IPhaserConfig extends Phaser.Types.Core.GameConfig {\r\n  scale: Phaser.Types.Core.ScaleConfig;\r\n}\r\n\r\nexport const phaserGameConfig: IPhaserConfig = {\r\n  width: 800,\r\n  height: 600,\r\n  physics: {\r\n    default: \"arcade\",\r\n    arcade: {\r\n      gravity: { x: 0, y: 200 }\r\n    }\r\n  },\r\n  type: Phaser.AUTO,\r\n  backgroundColor: \"#4488aa\",\r\n  transparent: true,\r\n  scale: scaleConfig,\r\n  scene: [MainScene]\r\n};\r\n","import { StoryScene } from \"./StoryScene\";\r\nimport { stories } from \"./stories\";\r\nimport { IStory, IStoryListItem } from \"./interfaces\";\r\nimport { IPhaserConfig, phaserGameConfig } from \"../src/config\";\r\n\r\n\r\nconst config: IPhaserConfig = {\r\n  ...phaserGameConfig,\r\n  scale: {\r\n    ...phaserGameConfig.scale,\r\n    mode: Phaser.Scale.NONE,\r\n    autoCenter: Phaser.Scale.NONE,\r\n  },\r\n  scene: [new StoryScene(StoryScene.name)],\r\n};\r\n\r\nconst game = new Phaser.Game(config);\r\n\r\nconst storiesEl = document.getElementById(\"stories\");\r\nif (storiesEl == null) throw \"no sidebar\";\r\nconst titleEl = document.getElementById(\"gameTitle\");\r\n\r\nlet prevStoryClose: () => void | undefined;\r\nconst runInGame = async (story: IStory, game: Phaser.Game) => {\r\n  prevStoryClose?.();\r\n  titleEl!.innerHTML = story.title;\r\n  const scene = game.scene.getScene(StoryScene.name);\r\n  prevStoryClose = await story.run(scene);\r\n};\r\n\r\nlet storiesIndex = 0;\r\nstories.forEach((story) => {\r\n  if (story.run != null) {\r\n    addStory(story as IStory, storiesEl, storiesIndex == 0);\r\n    storiesIndex++;\r\n  } else if (story.template === \"titleDelimiter\") {\r\n    addStoryDelimiter(story, storiesEl);\r\n  }\r\n});\r\n\r\nfunction addStory(story: IStory, storiesEl: HTMLElement, isStart: boolean) {\r\n  const el = addElement({\r\n    storyTag: \"button\",\r\n    innerHtml: `${story.title}`,\r\n    className: \"story\",\r\n    parent: storiesEl,\r\n  });\r\n  el.addEventListener(\"click\", () => runInGame(story, game).catch(console.warn));\r\n\r\n  if (isStart) {\r\n    setTimeout(() => {\r\n      el.focus();\r\n      runInGame(story, game).catch(console.warn);\r\n    }, 500);\r\n  }\r\n}\r\n\r\nfunction addStoryDelimiter(story: IStoryListItem, storiesEl: HTMLElement) {\r\n  return addElement({\r\n    storyTag: \"div\",\r\n    innerHtml: `${story.title}`,\r\n    className: \"storyDelimiter\",\r\n    parent: storiesEl,\r\n  });\r\n}\r\n\r\ninterface IAddProps {\r\n  storyTag: string;\r\n  innerHtml: string;\r\n  className: string;\r\n  parent: HTMLElement;\r\n}\r\nfunction addElement({ storyTag, className, innerHtml, parent }: IAddProps) {\r\n  const el = document.createElement(storyTag);\r\n  el.innerHTML = innerHtml;\r\n  el.classList.add(className);\r\n  parent.append(el);\r\n  return el;\r\n}\r\n"],"names":["StoryScene","storyTitle","title","TestButton","scene","text","textObject","testButtonStory","container","testButtonStory2","loadSpriteSheet","textureName","frameHeight","frameWidth","resolve","loadMineSweeperAssets","AssetImages","Minesweeper","cellSize","columns","rows","minesAmount","onCellReveal","onGameOver","row","col","cell","Cell","minesPlaced","minesCount","neighbor","neighbors","y","x","isWin","size","onClick","onRightClick","pointer","minesweeperStory","stories","MainScene","particles","logo","scaleConfig","phaserGameConfig","config","game","storiesEl","titleEl","prevStoryClose","runInGame","story","storiesIndex","addStory","addStoryDelimiter","isStart","el","addElement","storyTag","className","innerHtml","parent"],"sourceRoot":""}